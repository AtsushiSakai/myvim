/**
 *
 * @file: SubscribeLib.h
 *
 * @brief: トピック受信用関数
 *
 * @author: Atsushi Sakai 
 */
#ifndef SUBSCRIBE_LIB_H
#define SUBSCRIBE_LIB_H

#include "ros/ros.h"
#include <iostream>

//カスタムメッセージ
#include "mRPCEmulator/mRPCFrame.h"
#include "mRPCEmulator/mRPCPacket.h"

using namespace std;

/**
  * @brief:右のRSDSレーダデータ取得用クラス
  */
class SubVirtualmRPC{
  public:
    SubVirtualmRPC(){
      DT_TH_=2.0;  //[s] 受信ダイアグノシス閾値
    }

    mRPCEmulator::mRPCPacket pkt;//受信データ

    /**
     * @brief: 右のRSDSの生データ取得用
     */
    void CallBack(const mRPCEmulator::mRPCPacket::ConstPtr& msg){
      //cout<<"VirtualmRPC::"<<__func__<<endl;
      pkt.header=msg->header;
      pkt.packet=msg->packet;

      getTime_=ros::Time::now();//受信時間更新
    }

    /**
     * @brief:データ受信ダイアグノシス
     */
    void ReceiveDiagnosis(const string Name){
      //取得時間確認
      ros::Duration dt=ros::Time::now()-getTime_;

      if(dt.toSec()>=DT_TH_){//エラー
        ROS_ERROR_STREAM("[ReceiveDiagnosis] Cannot receive Data! from "<<Name);
      }
    }

    /**
     * @brief 受信したデータの点数を取得する関数
     */
    int GetNFrames(void){return pkt.packet.size();}

  private:
    double DT_TH_;//受信間隔ダイアグノシス用閾値
    ros::Time getTime_;//データ受信時間 この値は０で初期化される

};

#endif  //SUBSCRIBE_LIB_H
